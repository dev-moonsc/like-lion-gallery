package likelion.backend.domain;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import likelion.backend.dto.GalleryRequestDto;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * Entity class representing a gallery.
 * Stores information about the gallery such as image, title, description, and last update time.
 * This class is mapped to a database table using JPA annotations.
 */
@Entity
@Getter
@NoArgsConstructor
public class Gallery {
    /**
     * The unique identifier for the gallery.
     * This value is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The image URL or path associated with the gallery.
     */
    private String image;

    /**
     * The title of the gallery.
     */
    private String title;

    /**
     * The description of the gallery.
     */
    private String description;

    /**
     * The date and time when the gallery was last updated.
     */
    private LocalDateTime lastUpdate;

    /**
     * Constructs a Gallery entity from the given GalleryRequestDto and image path.
     *
     * @param requestDto the DTO containing title and description information
     * @param image      the image URL or path associated with the gallery
     */
    public Gallery(GalleryRequestDto requestDto, String image) {
        this.title = requestDto.getTitle();
        this.description = requestDto.getDescription();
        this.lastUpdate = LocalDateTime.now();
        this.image = image;
    }

    /**
     * Updates the gallery's title, description, and last update time
     * based on the provided request DTO.
     *
     * @param requestDto the DTO containing the new title and description
     */
    public void update(GalleryRequestDto requestDto) {
        this.title = requestDto.getTitle();
        this.description = requestDto.getDescription();
        this.lastUpdate = LocalDateTime.now();
    }
}
